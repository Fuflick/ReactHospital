{"ast":null,"code":"var _jsxFileName = \"/home/kraiben/Code/db-client/src/shared.tsx\";\nimport Input from \"./components/Input\";\nimport Specialization from \"./model/Specialization\";\nimport Checkbox from \"./components/Checkbox\";\nimport Select from \"./components/TableList\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let TableEnum = /*#__PURE__*/function (TableEnum) {\n  TableEnum[\"doctor\"] = \"\\u0414\\u043E\\u043A\\u0442\\u043E\\u0440\";\n  TableEnum[\"diagnose\"] = \"\\u0414\\u0438\\u0430\\u0433\\u043D\\u043E\\u0437\";\n  TableEnum[\"docdiagnose\"] = \"\\u0421\\u0432\\u044F\\u0437\\u044C\";\n  return TableEnum;\n}({});\nexport const [SERVER_HOST, SERVER_PORT] = [\"http://localhost\", 5000];\nexport function isTable(e, f) {\n  return f in e;\n}\nexport function getFormFields(t, init) {\n  switch (t) {\n    case \"doctor\":\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"\\u0418\\u043C\\u044F\",\n          required: true,\n          defaultValue: init && init.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-bold text-fpurple\",\n          children: \"\\u0421\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-2\",\n          children: Specialization.map((e, i) => /*#__PURE__*/_jsxDEV(Checkbox, {\n            name: \"specializations\",\n            value: i,\n            label: e,\n            defaultChecked: init && init.specializations.includes(i)\n          }, e, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 47\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    case \"diagnose\":\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"body\",\n          placeholder: \"\\u0421\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435\",\n          required: true,\n          defaultValue: init && init.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"date\",\n          name: \"date\",\n          required: true,\n          defaultValue: init && init.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    case \"docdiagnose\":\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          name: \"docId\",\n          table: \"doctor\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"diagId\",\n          table: \"diagnose\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n  }\n}\nexport function getFormData(e) {\n  const data = {};\n  for (let k of e.keys()) {\n    if (k == \"specializations\") {\n      data[k] = e.getAll(k).map(e => Number(e));\n    } else {\n      data[k] = e.get(k);\n    }\n  }\n  return data;\n}","map":{"version":3,"names":["Input","Specialization","Checkbox","Select","jsxDEV","_jsxDEV","Fragment","_Fragment","TableEnum","SERVER_HOST","SERVER_PORT","isTable","e","f","getFormFields","t","init","children","type","name","placeholder","required","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","className","map","i","value","label","defaultChecked","specializations","includes","body","date","table","getFormData","data","k","keys","getAll","Number","get"],"sources":["/home/kraiben/Code/db-client/src/shared.tsx"],"sourcesContent":["import Input from \"./components/Input\";\nimport { Diagnose } from \"./model/Diagnose\";\nimport { Doctor } from \"./model/Doctor\";\nimport { DoctorDiagnose } from \"./model/DoctorDiagnose\";\nimport Specialization from \"./model/Specialization\";\nimport Checkbox from \"./components/Checkbox\";\nimport Select from \"./components/TableList\";\n\nexport enum TableEnum {\n    \"doctor\" = \"Доктор\",\n    \"diagnose\" = \"Диагноз\",\n    \"docdiagnose\" = \"Связь\"\n}\n\nexport const [SERVER_HOST, SERVER_PORT] = [\"http://localhost\", 5000]\n\nexport type Table = \"doctor\" | \"diagnose\" | \"docdiagnose\"\n\nexport type EntityArray = Doctor[] | Diagnose[] | DoctorDiagnose[]\n\nexport type Entity = Doctor | Diagnose | DoctorDiagnose\n\nexport type PartialEntityRecord = Partial<Record<keyof Doctor | keyof Diagnose | keyof DoctorDiagnose, Doctor[keyof Doctor] | Diagnose[keyof Diagnose] | DoctorDiagnose[keyof DoctorDiagnose] | null>>\n\nexport type EntityFields = keyof Doctor & keyof Diagnose & keyof DoctorDiagnose\n\nexport function isTable<T>(e: any, f: keyof T): e is T { return f in e }\n\nexport function getFormFields(t: Table, init?: Entity) {\n    switch(t) {\n        case \"doctor\": return <>\n            <Input type=\"text\" name=\"name\" placeholder=\"Имя\" required defaultValue={init && (init as Doctor).name}/>\n            <div className=\"font-bold text-fpurple\">Специализация:</div>\n            <div className=\"flex flex-wrap gap-2\">\n                {Specialization.map((e, i) => <Checkbox key={e} name=\"specializations\" value={i} label={e} defaultChecked={init && (init as Doctor).specializations.includes(i)}/>)}\n            </div>\n            \n        </>\n        case \"diagnose\": return <>\n            <Input type=\"text\" name=\"body\" placeholder=\"Содержание\" required defaultValue={init && (init as Diagnose).body}/>\n            <Input type=\"date\" name=\"date\" required defaultValue={init && (init as Diagnose).date}/>\n\n        </>\n        case \"docdiagnose\": \n            return <>\n            {/* <Input type=\"number\" name=\"docId\" placeholder=\"ID доктора\" defaultValue={init && (init as DoctorDiagnose).docId}/>\n            <Input type=\"number\" name=\"diagId\" placeholder=\"ID диагноза\" defaultValue={init && (init as DoctorDiagnose).diagId}/> */}\n            <Select name=\"docId\" table=\"doctor\" required/>\n            <Select name=\"diagId\" table=\"diagnose\" required/>\n        </>\n    }\n}\n\nexport function getFormData(e: FormData) {\n    const data: PartialEntityRecord = {};\n    for(let k of e.keys()) {\n        if (k == \"specializations\") {\n            data[k as EntityFields] = (e.getAll(k) as Exclude<FormDataEntryValue, File>[]).map(e => Number(e))\n        } else {\n            data[k as EntityFields] = e.get(k) as Exclude<FormDataEntryValue, File>\n        }\n    }\n    return data\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}